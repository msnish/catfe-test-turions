Feature: Customer Interaction # features/generated/customer_interaction.feature:1
  As a financial system
  I want to monitor customer interactions
  So that I can ensure security and compliance
  Scenario Outline: Monitor customer login attempts -- @1.1   # features/generated/customer_interaction.feature:13
    Given a customer with 2 login attempts                    # features/steps/steps.py:58
    When the login is processed                               # features/steps/steps.py:62
    Then the login result should be "Success"                 # features/steps/steps.py:67

  Scenario Outline: Monitor customer login attempts -- @1.2   # features/generated/customer_interaction.feature:14
    Given a customer with 4 login attempts                    # features/steps/steps.py:58
    When the login is processed                               # features/steps/steps.py:62
    Then the login result should be "Failure"                 # features/steps/steps.py:67

@customer
Feature: Customer Interactions # features/generated/customer_interactions.feature:2
  As a banking web app
  I want to monitor customer interactions
  So that I can ensure security and compliance
  @login
  Scenario Outline: Monitor customer login attempts -- @1.1   # features/generated/customer_interactions.feature:15
    Given a customer with 2 login attempts                    # features/steps/steps.py:58
    When the login is processed                               # features/steps/steps.py:62
    Then the login result should be "Success"                 # features/steps/steps.py:67

  @login
  Scenario Outline: Monitor customer login attempts -- @1.2   # features/generated/customer_interactions.feature:16
    Given a customer with 4 login attempts                    # features/steps/steps.py:58
    When the login is processed                               # features/steps/steps.py:62
    Then the login result should be "Failure"                 # features/steps/steps.py:67

  @login
  Scenario Outline: Monitor customer login attempts -- @1.3   # features/generated/customer_interactions.feature:17
    Given a customer with 6 login attempts                    # features/steps/steps.py:58
    When the login is processed                               # features/steps/steps.py:62
    Then the login result should be "Failure"                 # features/steps/steps.py:67

@financial
Feature: Financial Transactions # features/generated/financial_transactions.feature:2
  As a banking web app
  I want to validate financial transactions
  So that they comply with system rules
  @transaction
  Scenario Outline: Validate a financial transaction -- @1.1                   # features/generated/financial_transactions.feature:15
    Given a transaction of type "Wire Transfer" with amount 2000 in USD to EUR # features/steps/steps.py:11
    When the transaction is processed                                          # features/steps/steps.py:20
    Then the result should be "Success"                                        # features/steps/steps.py:29

  @transaction
  Scenario Outline: Validate a financial transaction -- @1.2       # features/generated/financial_transactions.feature:16
    Given a transaction of type "ACH" with amount 50 in USD to USD # features/steps/steps.py:11
    When the transaction is processed                              # features/steps/steps.py:20
    Then the result should be "Success"                            # features/steps/steps.py:29

  @transaction
  Scenario Outline: Validate a financial transaction -- @1.3                   # features/generated/financial_transactions.feature:17
    Given a transaction of type "ATM Withdrawal" with amount 400 in JPY to JPY # features/steps/steps.py:11
    When the transaction is processed                                          # features/steps/steps.py:20
    Then the result should be "Success"                                        # features/steps/steps.py:29

  @transaction
  Scenario Outline: Validate a financial transaction -- @1.4                  # features/generated/financial_transactions.feature:18
    Given a transaction of type "Cross-Border" with amount 1000 in USD to EUR # features/steps/steps.py:11
    When the transaction is processed                                         # features/steps/steps.py:20
    Then the result should be "Failure"                                       # features/steps/steps.py:29
      Assertion Failed: Expected Failure, but got Success


  @transaction
  Scenario Outline: Validate a financial transaction -- @1.5                    # features/generated/financial_transactions.feature:19
    Given a transaction of type "Wire Transfer" with amount 60000 in USD to JPY # features/steps/steps.py:11
    When the transaction is processed                                           # features/steps/steps.py:20
    Then the result should be "Failure"                                         # features/steps/steps.py:29

  @transaction
  Scenario Outline: Validate a financial transaction -- @1.6                   # features/generated/financial_transactions.feature:20
    Given a transaction of type "Wire Transfer" with amount 2000 in USD to JPY # features/steps/steps.py:11
    When the transaction is processed                                          # features/steps/steps.py:20
    Then the result should be "Hold"                                           # features/steps/steps.py:29
      Assertion Failed: Expected Hold, but got Success


@fraud
Feature: Fraud Detection # features/generated/fraud_detection.feature:2
  As a banking web app
  I want to detect fraudulent transactions
  So that I can prevent financial losses
  @fraud_detection
  Scenario Outline: Detect fraudulent transactions -- @1.1   # features/generated/fraud_detection.feature:15
    Given a transaction to ACC1002 with amount 2000          # features/steps/steps.py:33
    When the transaction is analyzed for fraud               # features/steps/steps.py:40
    Then the fraud detection result should be "Flag"         # features/steps/steps.py:54

  @fraud_detection
  Scenario Outline: Detect fraudulent transactions -- @1.2   # features/generated/fraud_detection.feature:16
    Given a transaction to ACC1004 with amount 50            # features/steps/steps.py:33
    When the transaction is analyzed for fraud               # features/steps/steps.py:40
    Then the fraud detection result should be "Flag"         # features/steps/steps.py:54
      Assertion Failed: Expected Flag, but got Pass


  @fraud_detection
  Scenario Outline: Detect fraudulent transactions -- @1.3   # features/generated/fraud_detection.feature:17
    Given a transaction to - with amount 400                 # features/steps/steps.py:33
    When the transaction is analyzed for fraud               # features/steps/steps.py:40
    Then the fraud detection result should be "Flag"         # features/steps/steps.py:54
      Assertion Failed: Expected Flag, but got Pass


  @fraud_detection
  Scenario Outline: Detect fraudulent transactions -- @1.4   # features/generated/fraud_detection.feature:18
    Given a transaction to ACC1002 with amount 1000          # features/steps/steps.py:33
    When the transaction is analyzed for fraud               # features/steps/steps.py:40
    Then the fraud detection result should be "Flag"         # features/steps/steps.py:54

  @fraud_detection
  Scenario Outline: Detect fraudulent transactions -- @1.5   # features/generated/fraud_detection.feature:19
    Given a transaction to ACC1003 with amount 60000         # features/steps/steps.py:33
    When the transaction is analyzed for fraud               # features/steps/steps.py:40
    Then the fraud detection result should be "Flag"         # features/steps/steps.py:54

  @fraud_detection
  Scenario Outline: Detect fraudulent transactions -- @1.6   # features/generated/fraud_detection.feature:20
    Given a transaction to ACC1003 with amount 2000          # features/steps/steps.py:33
    When the transaction is analyzed for fraud               # features/steps/steps.py:40
    Then the fraud detection result should be "Flag"         # features/steps/steps.py:54

Feature: Transaction Validation # features/generated/transaction_validation.feature:1
  As a financial system
  I want to validate transactions
  So that they comply with system rules
  Scenario Outline: Validate a financial transaction -- @1.1                   # features/generated/transaction_validation.feature:13
    Given a transaction of type "Wire Transfer" with amount 2000 in USD to EUR # features/steps/steps.py:11
    When the transaction is processed                                          # features/steps/steps.py:20
    Then the result should be "Success"                                        # features/steps/steps.py:29

  Scenario Outline: Validate a financial transaction -- @1.2       # features/generated/transaction_validation.feature:14
    Given a transaction of type "ACH" with amount 50 in USD to USD # features/steps/steps.py:11
    When the transaction is processed                              # features/steps/steps.py:20
    Then the result should be "Success"                            # features/steps/steps.py:29

  Scenario Outline: Validate a financial transaction -- @1.3                   # features/generated/transaction_validation.feature:15
    Given a transaction of type "ATM Withdrawal" with amount 400 in JPY to JPY # features/steps/steps.py:11
    When the transaction is processed                                          # features/steps/steps.py:20
    Then the result should be "Success"                                        # features/steps/steps.py:29

  Scenario Outline: Validate a financial transaction -- @1.4                  # features/generated/transaction_validation.feature:16
    Given a transaction of type "Cross-Border" with amount 1000 in USD to EUR # features/steps/steps.py:11
    When the transaction is processed                                         # features/steps/steps.py:20
    Then the result should be "Failure"                                       # features/steps/steps.py:29
      Assertion Failed: Expected Failure, but got Success


  Scenario Outline: Validate a financial transaction -- @1.5                    # features/generated/transaction_validation.feature:17
    Given a transaction of type "Wire Transfer" with amount 60000 in USD to JPY # features/steps/steps.py:11
    When the transaction is processed                                           # features/steps/steps.py:20
    Then the result should be "Failure"                                         # features/steps/steps.py:29

  Scenario Outline: Validate a financial transaction -- @1.6                   # features/generated/transaction_validation.feature:18
    Given a transaction of type "Wire Transfer" with amount 2000 in USD to JPY # features/steps/steps.py:11
    When the transaction is processed                                          # features/steps/steps.py:20
    Then the result should be "Hold"                                           # features/steps/steps.py:29
      Assertion Failed: Expected Hold, but got Success



Failing scenarios:
  features/generated/financial_transactions.feature:18  Validate a financial transaction -- @1.4 
  features/generated/financial_transactions.feature:20  Validate a financial transaction -- @1.6 
  features/generated/fraud_detection.feature:16  Detect fraudulent transactions -- @1.2 
  features/generated/fraud_detection.feature:17  Detect fraudulent transactions -- @1.3 
  features/generated/transaction_validation.feature:16  Validate a financial transaction -- @1.4 
  features/generated/transaction_validation.feature:18  Validate a financial transaction -- @1.6 

2 features passed, 3 failed, 0 skipped
17 scenarios passed, 6 failed, 0 skipped
63 steps passed, 6 failed, 0 skipped, 0 undefined
Took 0m0.018s
